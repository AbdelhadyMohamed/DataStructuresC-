#include <iostream>
using namespace std;
class Array
{
private:
	int size;
	int length;
	int *items;
public:
	Array(int arrsize)
	{
		size = arrsize;
		length = 0;
		items = new int[arrsize];
	}
	void Fill()
	{
		int number_of_items;
		cout << "how many items you want to fill" << endl;
		cin >> number_of_items;
		if (number_of_items > size)
		{
			cout << "you cant exceed the array size" << endl;
			return;
		}
		else
		{
			for (int i = 0; i < number_of_items; i++)
			{
				cout << "enter item number " << i << endl;
				cin >> items[i];
				length++;
			}

		}
	}
	void Display()
	{
		cout << "displaying array values" << endl;
		for (int i = 0; i < length; i++)
		{
			cout <<items[i] << " ";
		}
		cout << endl;

	}
	int get_size() {
		return size;
	}
	int get_length()
	{
		return length;
	}
	int linaer_search(int key) {
		int index = -1;
		for (int i = 0; i < length; i++)
		{
			if (items[i] == key)
			{
				index = i;
				break;
			}
		}
		return index;

	}
	void Append(int new_item)
	{
		if (length == size) {
			cout << "array is full " << endl;

		}
		else
		{
			items[length] = new_item;
			length++;
		}
	}
	void Insert(int new_item,int index)
	{
	
			if (index >= size && index>=0)
		{
			cout << "Error: Index out of range " <<endl;
		}
			else
			{
				if (index > length) 
				{
					items[index-1] = new_item;
					length++;
				}

				else 
				{
					for (int i = length; i > index; i--)
					{
						items[i] = items[i - 1];
					}
					items[index] = new_item;
					length++;
				}
			}
	}
	void Delete(int index) {
		if (index>0 && index<size)
		{
			for (int i = index; i < length; i++)
			{
				items[i] = items[i + 1];
			}
			length--;
		}
		else
		{
			cout << "index out of range" << endl;
		}
	}
	void Englarge(int new_size)
	{
		if (new_size <= size)
		{
			cout << "new size must be larger than current size " << endl;
			return;
		}
		else {
			size = new_size;
			int* temp = items;
			items = new int[new_size];
			for (int i = 0; i < length; i++)
			{
				items[i] = temp[i];
			}
			delete[]temp;
		}
	}
	void Merge(Array other)
	{
		int new_size = size + other.get_size();
		size = new_size;
		int* temp = items;
		items = new int[new_size];
		int i = 0;
		for ( i = 0; i < length; i++)
		{
			items[i] = temp[i];
		}
		delete[] temp;
		int j = i;
		for (int i =0; i < other.get_length() ; i++)
		{
			items[j++] = other.items[i];
			length++;

		}

	}
};
int main()
{
	int arrsize;
	cout << "eneter the array size" << endl;
	cin >> arrsize;
	Array myarray(arrsize);
	myarray.Fill();
	myarray.Display();
	cout << "array size = " << myarray.get_size() << "\t";
	cout << "while array length = " << myarray.get_length()<< "\n";
	/*cout << "enter element you want to search about to get its index" << "\n";
	int key;
	cin >> key;
	int index = myarray.linaer_search(key);
	if (index == -1)
	{
		cout << "element not found" << "\n";

	}
	else {
		cout << "elemnt index is : " << index+1<<"\n";
	}
	cout << "enter elment you want to append" << endl;
	int new_item;
	cin >> new_item;
	myarray.Append(new_item);
	myarray.Display();
	cout << "please enter item you want to insert and its index " << endl;
	int new_item1;
	int index1;
	cin >> new_item1 >> index1;
	myarray.Insert(new_item1, index1);
	myarray.Display();
	myarray.get_size();
	myarray.get_length();
	int item_deleted;
	cout << "enter index of item you want to delete" << endl;
	cin >> item_deleted;
	myarray.Delete(item_deleted);
	myarray.Display();
	cout << "enter new size" << endl;
	int new_size;
	cin >> new_size;
	myarray.Englarge(new_size);
	cout << "array size = " << myarray.get_size() << "\t";
	cout << "while array length = " << myarray.get_length() << "\n";
	myarray.Display();*/
	Array other(3);
	other.Fill();
	myarray.Merge(other);
	cout << "array size = " << myarray.get_size() << "\t";
	cout << "while array length = " << myarray.get_length() << "\n";
	myarray.Display();


}
